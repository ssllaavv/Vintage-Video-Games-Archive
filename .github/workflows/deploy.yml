name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DEBUG: 1
      ALLOWED_HOSTS: "127.0.0.1 localhost"
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      DB_HOST: 127.0.0.1
      DB_PORT: 5432
      POSTGRES_HOST: 127.0.0.1
      POSTGRES_PORT: 5432
      SECRET_KEY: "django-insecure-test-key-123"
      EMAIL_BACKEND: "django.core.mail.backends.smtp.EmailBackend"
      EMAIL_HOST: "smtp-relay.brevo.com"
      EMAIL_PORT: 587
      EMAIL_USE_TLS: 1
      EMAIL_HOST_USER: "7df4dc001@smtp-brevo.com"
      EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
      DEFAULT_FROM_EMAIL: "marulevsvetoslav@gmail.com"

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create Migrations
      run: |
        python manage.py makemigrations accounts
        python manage.py makemigrations

    - name: Apply Migrations
      run: |
        python manage.py migrate

    - name: Run Tests
      run: |
        python manage.py test --verbosity=2


  build-and-push-to-DockerHub:
    needs:  build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v2

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/games-archive:latest

#  deploy:
#    needs: build-and-push-to-DockerHub
#    runs-on: ubuntu-latest
#    if: github.ref == 'refs/heads/main'
#
#    steps:
#    - uses: actions/checkout@v4
#
#    - name: Install sshpass
#      run: sudo apt-get install -y sshpass
#
#    - name: Copy deployment files
#      run: |
#        mkdir -p deploy
#        cp docker-compose.yml deploy/
#        cp -r nginx deploy/
#
#    - name: Deploy to Azure VM
#      env:
#        SSH_PASS: ${{ secrets.SSH_PASSWORD }}
#      run: |
#        # Disable strict host key checking
#        echo "StrictHostKeyChecking no" >> ~/.ssh/config
#
#        # Copy docker-compose file
#        sshpass -p "$SSH_PASS" scp -r deploy/* ${{ secrets.SSH_USERNAME }}@${{ secrets.AZURE_HOST }}:/home/${{ secrets.SSH_USERNAME }}/games-archive/
#
#        # Deploy using Docker Compose
#        sshpass -p "$SSH_PASS" ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.AZURE_HOST }} "\
#          cd /home/${{ secrets.SSH_USERNAME }}/games-archive && \
#          docker-compose pull && \
#          docker-compose up -d"

  deploy:
    needs: build-and-push-to-DockerHub
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Install sshpass and curl
      run: sudo apt-get install -y sshpass curl

    - name: Copy deployment files
      run: |
        mkdir -p deploy
        cp docker-compose.yml deploy/
        cp -r nginx deploy/

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        touch ~/.ssh/config
        echo "StrictHostKeyChecking no" >> ~/.ssh/config
        chmod 600 ~/.ssh/config

    - name: Clean and Deploy to Azure VM
      env:
        SSH_PASS: ${{ secrets.SSH_PASSWORD }}
      run: |
        # Execute cleanup commands
        sshpass -p "$SSH_PASS" ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.AZURE_HOST }} "\
          cd /home/${{ secrets.SSH_USERNAME }} && \
          sudo -S <<< \"$SSH_PASS\" docker-compose -f games-archive/docker-compose.yml down || true && \
          sudo -S <<< \"$SSH_PASS\" docker rm -f \$(sudo docker ps -a -q) || true && \
          sudo -S <<< \"$SSH_PASS\" docker rmi \$(sudo docker images | grep 'games-archive' | awk '{print \$3}') || true && \
          sudo -S <<< \"$SSH_PASS\" rm -f games-archive/docker-compose.yml && \
          sudo -S <<< \"$SSH_PASS\" rm -rf games-archive/nginx && \
          sudo -S <<< \"$SSH_PASS\" mkdir -p games-archive/nginx && \
          sudo -S <<< \"$SSH_PASS\" chown -R ${{ secrets.SSH_USERNAME }}:${{ secrets.SSH_USERNAME }} games-archive"

        # Copy new deployment files
        sshpass -p "$SSH_PASS" scp -r deploy/* ${{ secrets.SSH_USERNAME }}@${{ secrets.AZURE_HOST }}:/home/${{ secrets.SSH_USERNAME }}/games-archive/

        # Set proper permissions and deploy using Docker Compose
        sshpass -p "$SSH_PASS" ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.AZURE_HOST }} "\
          cd /home/${{ secrets.SSH_USERNAME }} && \
          sudo -S <<< \"$SSH_PASS\" chown -R ${{ secrets.SSH_USERNAME }}:${{ secrets.SSH_USERNAME }} games-archive && \
          cd games-archive && \
          sudo -S <<< \"$SSH_PASS\" docker-compose pull && \
          sudo -S <<< \"$SSH_PASS\" docker-compose up -d"

    - name: Verify Container Deployment
      env:
        SSH_PASS: ${{ secrets.SSH_PASSWORD }}
      run: |
        # Wait for services to start
        sleep 30
        
        # Check if containers are running
        CONTAINERS_STATUS=$(sshpass -p "$SSH_PASS" ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.AZURE_HOST }} "\
          cd /home/${{ secrets.SSH_USERNAME }}/games-archive && \
          sudo -S <<< \"$SSH_PASS\" docker-compose ps --status running | grep -c 'Up' || echo '0'")
        
        # Expected number of containers (web, db, nginx)
        EXPECTED_CONTAINERS=3
        
        if [ "$CONTAINERS_STATUS" -eq "$EXPECTED_CONTAINERS" ]; then
          echo "Container deployment verified successfully! All containers are running."
        else
          echo "Container deployment verification failed! Expected $EXPECTED_CONTAINERS containers, but found $CONTAINERS_STATUS running."
          # Get logs from containers for debugging
          sshpass -p "$SSH_PASS" ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.AZURE_HOST }} "\
            cd /home/${{ secrets.SSH_USERNAME }}/games-archive && \
            sudo -S <<< \"$SSH_PASS\" docker-compose logs"
          exit 1
        fi

    - name: Verify Website Accessibility
      run: |
        echo "Waiting for website to become available..."
        MAX_RETRIES=10
        RETRY_COUNTER=0
        
        while [ $RETRY_COUNTER -lt $MAX_RETRIES ]
        do
          # Attempt to fetch the website
          RESPONSE=$(curl -s -w "\n%{http_code}" https://games-archive.westeurope.cloudapp.azure.com)
          HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
          HTML_CONTENT=$(echo "$RESPONSE" | head -n-1)
          
          # Check for successful HTTP status and HTML content
          if [ "$HTTP_STATUS" -eq 200 ] && echo "$HTML_CONTENT" | grep -q "<html"; then
            echo "Website verification successful!"
            echo "HTTP Status: $HTTP_STATUS"
            echo "HTML content found and validated"
            exit 0
          fi
          
          echo "Attempt $((RETRY_COUNTER + 1)) of $MAX_RETRIES failed. Waiting 30 seconds before retry..."
          RETRY_COUNTER=$((RETRY_COUNTER + 1))
          sleep 30
        done
        
        echo "Website verification failed after $MAX_RETRIES attempts!"
        echo "Last HTTP Status: $HTTP_STATUS"
        echo "Last Response Content:"
        echo "$HTML_CONTENT"
        exit 1