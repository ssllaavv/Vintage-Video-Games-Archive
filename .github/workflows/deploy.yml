name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DEBUG: 1
      ALLOWED_HOSTS: "127.0.0.1 localhost"
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      DB_HOST: 127.0.0.1
      DB_PORT: 5432
      POSTGRES_HOST: 127.0.0.1
      POSTGRES_PORT: 5432
      SECRET_KEY: "django-insecure-test-key-123"
      EMAIL_BACKEND: "django.core.mail.backends.smtp.EmailBackend"
      EMAIL_HOST: "smtp-relay.brevo.com"
      EMAIL_PORT: 587
      EMAIL_USE_TLS: 1
      EMAIL_HOST_USER: "7df4dc001@smtp-brevo.com"
      EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
      DEFAULT_FROM_EMAIL: "marulevsvetoslav@gmail.com"

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create Migrations
      run: |
        python manage.py makemigrations accounts
        python manage.py makemigrations

    - name: Apply Migrations
      run: |
        python manage.py migrate

    - name: Run Tests
      run: |
        python manage.py test --verbosity=2


  build-and-push-to-DockerHub:
    needs:  build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v2

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/games-archive:latest

#  deploy:
#    needs: build-and-push-to-DockerHub
#    runs-on: ubuntu-latest
#    if: github.ref == 'refs/heads/main'
#
#    steps:
#    - uses: actions/checkout@v4
#
#    - name: Install sshpass
#      run: sudo apt-get install -y sshpass
#
#    - name: Copy deployment files
#      run: |
#        mkdir -p deploy
#        cp docker-compose.yml deploy/
#        cp -r nginx deploy/
#
#    - name: Deploy to Azure VM
#      env:
#        SSH_PASS: ${{ secrets.SSH_PASSWORD }}
#      run: |
#        # Disable strict host key checking
#        echo "StrictHostKeyChecking no" >> ~/.ssh/config
#
#        # Copy docker-compose file
#        sshpass -p "$SSH_PASS" scp -r deploy/* ${{ secrets.SSH_USERNAME }}@${{ secrets.AZURE_HOST }}:/home/${{ secrets.SSH_USERNAME }}/games-archive/
#
#        # Deploy using Docker Compose
#        sshpass -p "$SSH_PASS" ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.AZURE_HOST }} "\
#          cd /home/${{ secrets.SSH_USERNAME }}/games-archive && \
#          docker-compose pull && \
#          docker-compose up -d"

  deploy:
    needs: build-and-push-to-DockerHub
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Install sshpass and curl
      run: sudo apt-get install -y sshpass curl

    - name: Copy deployment files
      run: |
        mkdir -p deploy/nginx/conf.d
        cp docker-compose.yml deploy/
        cp -r nginx/* deploy/nginx/

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        touch ~/.ssh/config
        echo "StrictHostKeyChecking no" >> ~/.ssh/config
        chmod 600 ~/.ssh/config

    - name: Prepare Remote Environment
      env:
        SSH_PASS: ${{ secrets.SSH_PASSWORD }}
      run: |
        # Create necessary directories with proper permissions
        sshpass -p "$SSH_PASS" ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.AZURE_HOST }} "sudo bash -c '\
          mkdir -p /home/${{ secrets.SSH_USERNAME }}/games-archive/nginx/conf.d && \
          chown -R ${{ secrets.SSH_USERNAME }}:${{ secrets.SSH_USERNAME }} /home/${{ secrets.SSH_USERNAME }}/games-archive'"

    - name: Clean Previous Deployment
      env:
        SSH_PASS: ${{ secrets.SSH_PASSWORD }}
      run: |
        sshpass -p "$SSH_PASS" ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.AZURE_HOST }} "sudo bash -c '\
          cd /home/${{ secrets.SSH_USERNAME }}/games-archive && \
          docker-compose down || true && \
          docker system prune -af || true && \
          rm -rf /home/${{ secrets.SSH_USERNAME }}/games-archive/* && \
          mkdir -p /home/${{ secrets.SSH_USERNAME }}/games-archive/nginx/conf.d && \
          chown -R ${{ secrets.SSH_USERNAME }}:${{ secrets.SSH_USERNAME }} /home/${{ secrets.SSH_USERNAME }}/games-archive'"

    - name: Copy New Files
      env:
        SSH_PASS: ${{ secrets.SSH_PASSWORD }}
      run: |
        sshpass -p "$SSH_PASS" scp -r deploy/* ${{ secrets.SSH_USERNAME }}@${{ secrets.AZURE_HOST }}:/home/${{ secrets.SSH_USERNAME }}/games-archive/
        
        # Set permissions after copy
        sshpass -p "$SSH_PASS" ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.AZURE_HOST }} "sudo bash -c '\
          chown -R ${{ secrets.SSH_USERNAME }}:${{ secrets.SSH_USERNAME }} /home/${{ secrets.SSH_USERNAME }}/games-archive && \
          chmod -R 755 /home/${{ secrets.SSH_USERNAME }}/games-archive'"

    - name: Start Containers
      env:
        SSH_PASS: ${{ secrets.SSH_PASSWORD }}
      run: |
        sshpass -p "$SSH_PASS" ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.AZURE_HOST }} "sudo bash -c '\
          cd /home/${{ secrets.SSH_USERNAME }}/games-archive && \
          docker-compose pull && \
          docker-compose up -d && \
          sleep 30'"

    - name: Run Django Commands
      env:
        SSH_PASS: ${{ secrets.SSH_PASSWORD }}
      run: |
        sshpass -p "$SSH_PASS" ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.AZURE_HOST }} "sudo bash -c '\
          cd /home/${{ secrets.SSH_USERNAME }}/games-archive && \
          echo \"Running collectstatic...\" && \
          docker-compose exec -T web python manage.py collectstatic --noinput && \
          echo \"Running makemigrations...\" && \
          docker-compose exec -T web python manage.py makemigrations && \
          echo \"Running migrate...\" && \
          docker-compose exec -T web python manage.py migrate && \
          echo \"All Django commands completed successfully\"'"

    - name: Restart Containers
      env:
        SSH_PASS: ${{ secrets.SSH_PASSWORD }}
      run: |
        sshpass -p "$SSH_PASS" ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.AZURE_HOST }} "sudo bash -c '\
          cd /home/${{ secrets.SSH_USERNAME }}/games-archive && \
          docker-compose restart'"

    - name: Verify Container Deployment
      env:
        SSH_PASS: ${{ secrets.SSH_PASSWORD }}
      run: |
        TIMEOUT=300
        INTERVAL=10
        time_passed=0
        
        while [ $time_passed -lt $TIMEOUT ]; do
          running_containers=$(sshpass -p "$SSH_PASS" ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.AZURE_HOST }} "sudo bash -c '\
            cd /home/${{ secrets.SSH_USERNAME }}/games-archive && \
            docker-compose ps -q | wc -l'")
          
          if [ "$running_containers" -eq 3 ]; then
            echo "All containers are running!"
            exit 0
          fi
          
          echo "Found $running_containers running containers. Waiting for 3 containers..."
          sleep $INTERVAL
          time_passed=$((time_passed + INTERVAL))
        done
        
        echo "Deployment verification failed! Dumping container logs..."
        sshpass -p "$SSH_PASS" ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.AZURE_HOST }} "sudo bash -c '\
          cd /home/${{ secrets.SSH_USERNAME }}/games-archive && \
          docker-compose logs'"
        exit 1

    - name: Verify Website Accessibility
      run: |
        MAX_RETRIES=30
        RETRY_INTERVAL=10
        
        for ((i=1; i<=MAX_RETRIES; i++)); do
          echo "Attempt $i of $MAX_RETRIES..."
          
          if curl -s -f -k https://games-archive.westeurope.cloudapp.azure.com > /dev/null; then
            echo "Website is accessible!"
            exit 0
          fi
          
          echo "Website not yet accessible, waiting ${RETRY_INTERVAL} seconds..."
          sleep $RETRY_INTERVAL
        done
        
        echo "Website verification failed after $MAX_RETRIES attempts"
        exit 1